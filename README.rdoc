== Jaws is still very Alpha'ish
... So don't base your commercial projects on it ;). APIs will most likely settle down during the coming months.
When it's stable enough I'll probably release it as 0.1.

= Jaws - HTML5 Javascript web game development library

Depends on Javascript 1.6+ (ECMA-262 Edition 5).
Tested with with:
* Chrome 9 + 10
* Firefox 3.6.x + 4.x
* Safari 5+
* IE9

Licensed under LGPL so you're free to use it for commercial projects.

== Highlights
* Animation(), Sprite(), SpriteSheet(), TileMap(), Assets() and other useful constructors
* Easy and robust game states to switch between menus, play, high score lists and settings
* Documented code and explained examples

Jaws also...
* Does <canvas>-sprites (and exprimental HTML-based sprites)
* Does not depend on any other javascript library
* Doesn't try to force a certain "JS class pattern" on you, just pure javascript as mother nature intended it
* Tries to make assets (images, music, json data) in webgames as easy as possible
* Often does object literals as arguments for readabillity (ie. new Sprite({image: "player.png", x: 100, y: 100})
* Builds on lessons learned from years of developing http://github.com/ippa/chingu (Ruby game lib)

== Learn more
Since Jaws is currently moving so fast, jawsjs.com might be slightly outdated.

* {http://jawsjs.com/}[http://jawsjs.com/]              - Official Jaws homepage. Jaws docs and design choices.
* {http://jawsjs.com/jawsjs/test/}[http://jawsjs.com/jawsjs/test/]    - Jaws QUnit testsuite

== Simple examples demonstrating certain features
Check out the sourcecode for comments and explanations:

* http://jawsjs.com/jawsjs/examples/example1.html  - focus: manual setup of canvas. later examples shows better ways.
* http://jawsjs.com/jawsjs/examples/example2.html  - focus: jaws game states
* http://jawsjs.com/jawsjs/examples/example3.html  - focus: jaws.Animation
* http://jawsjs.com/jawsjs/examples/example4.html  - focus: jaws.Rect based collision detection
* http://jawsjs.com/jawsjs/examples/example5.html  - focus: the jaws.Sprite({anchor: "..."}) parameter
* http://jawsjs.com/jawsjs/examples/example6.html  - focus: jaws.Parallax
* http://jawsjs.com/jawsjs/examples/example7.html  - focus: simple DOM-based sprite
* http://jawsjs.com/jawsjs/examples/example8.html  - focus: jaws.TileMap
* http://jawsjs.com/jawsjs/examples/example9.html  - focus: jaws.Viewport (The basics for a sidescrolling platformer right here)

== Games using Jaws
* {http://ippa.se/webgames/unwaivering/}[http://ippa.se/webgames/unwaivering/]  - A Jaws-game for http://www.ludumdare.com/compo/2011/01/25/minild-24/

.. missing your game here? Msg me on github!

== Loading Jaws
* jaws.js - includes the whole framework in one easy-to-include file.
* jaws-min.js - same as jaws.js but minified with Googles closure compiler.
* jaws-dynamic.js - dynamically loads all separate jaws files. Useful for debugging errors in Jaws.

You can also link to invidual files in your HTML:
  <script src="/jawsjs/src/core.js"></script>
  <script src="/jawsjs/src/sprite.js"></script>

NOTE: core.js always needed. But then you can pick and choose depending on what you need.
A rule of thumb is that a file foo.js will include a contructor named Foo().

== Code demo
  //
  // Jaws will provide powerful functions like jaws.start() to quickly get a robust gameloop running.
  // It's also possible to do it more manually, fetch your own canvas context and sent it to new Sprite() for example.
  // Nothing stops you from using jaws.assets or other jaws.helpers with your own game loop either.
  //
  // Below code shows the preferred way, letting jaws worry about most of the boring setup stuff
  // so we can get straight to get game logic.
  //
  <html>
  <script src="jaws.js"></script>
  <body>

  <canvas width=500 height=300></canvas> <!-- don't set width/height of canvas with CSS -->

  <script>
    // Jaws encourages the use of game states to separate various parts of your game.
    // We send MyGameState to jaws.start() to start with.
    // You can later switch to another game state with jaws.switchGameState(OtherGameState)
    function MyGameState() {
      var player;
      var robot;
    
      // Put your one-time initializing here. Will get called once each time this game state is activated.
      this.setup = function() {
        // Make a sprite, place it at position 10/200
        // The string "player.png" will resolve to a previously fetched resource
        // We let jaws worry about what canvas to paint to here.
        // If we want we could simple pass {context: my_canvas_context} to Sprite constructor
        player = new jaws.Sprite({image: "player.png", x: 10, y: 200});
    
        // Let's create an animated robot sprite
        robot = new jaws.Sprite({x: 200, y: 200});

        robot.animation = new jaws.Animation({sprite_sheet: "images/droid_11x15.png", frame_size: [11,15], frame_duration: 120});
      }
    
      // update() is called each gametick with given FPS. Put your game logic here.
      this.update = function() {
        if(jaws.pressed("left"))  { player.x--; }
        if(jaws.pressed("right")) { player.x++; }
        robot.image = robot.animation.next();
      }
    
      // draw() is called each gametick just after update() is done. Put your drawing/canvas stuff here.
      this.draw = function() {
        player.draw();
        robot.draw();
      }
    }
       
    //
    // jaws.start() is the easiest way to get something up and running. It will:
    //
    // 1) Call jaws.init() that will detect <canvas> (or create one for you) and set up the 2D context
    // - then available in jaws.canvas and jaws.context
    //
    // 2) Pre-load all assets
    // - player.png image is then available with jaws.assets.get("player.png")
    //
    // 3) When all assets are loaded, call setup()
    // 4) Then call update() / draw() with given FPS (default 60) until game ends or another game state is activated
    //
    window.onload = function() {
      // Add to jaws internal list of assets.
      // You can then either:
      // - have jaws.start() load them automatically for you
      // - or load them manually with jaws.assets.loadAll({loaded: myAssetsAreReadyCall})
      jaws.assets.add("images/droid_11x15.png");
      jaws.assets.add("images/player.png");

      // ... or nicer when you have a lot of assets:
      // jaws.assets.path = "images/"
      // jaws.assets.add(["droid_11x15.png", "player.png"])
 
      jaws.start(MyGameState);
    }
  </script>
  </body>
  </html>

== Sprite() 
=== Chainable functions (they all return this)
  sprite.setImage(resource)         // sets new image from an image, canvas or string representing an asset ("foo.png")
  sprite.flip()                     // flips sprite horizontally
  sprite.rotate(angle)              // modify angle
  sprite.rotateTo(angle)            // set angle
  sprite.move(x,y)                  // modify x/y
  sprite.moveTo(x,y)                // set x/y
  sprite.setWidth(width)            // sets width through scaling
  sprite.setHeight(height)          // sets height through scaling
  sprite.setX(x)                    // sets x
  sprite.setY(y)                    // sets y
  sprite.resize(width,height)       // modify width/height. Modifies scale_factor_x/scale_factor_y.
  sprite.resizeTo(width,height)     // set fixed width/height. Modifies scale_factor_x/scale_factor_y.
  sprite.scale(scale_factor)        // scale sprite by scale_factor. Modifies width/height.
  sprite.scaleWidth(scale_factor)   // scale sprite horizontally by scale_factor. Modifies width.
  sprite.scaleHeight(scale_factor)  // scale sprite vertically by scale_factor. Modifies height.
  sprite.anchor(anchor_string)      // anchor x/y to a point on the sprite. For example "top_left", "center", "center_bottom"

=== Simple variables for faster write/reads of properties
  sprite.x              // horizontal position  (0 = furthest left)
  sprite.y              // vertical position    (0 = top)
  sprite.flipped        // true or false
  sprite.angle          // 0-360
  sprite.alpha          // transparency 0=fully transparent, 1=no transperency
  sprite.image          // image or canvas object

== Simple variables to read (not safe to modify directly!)
  sprite.width          // width of sprite
  sprite.height         // height of sprite
  sprite.scale_factor_x // width scaling
  sprite.scale_factor_y // height scaling

== Other
   rect()               // returns a new Rect() perfectly surronding the sprite no matter the anchor
