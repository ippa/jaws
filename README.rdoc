--- This is alpha-alpha-pre-release software ---

= Jaws - HTML5 Javascript web game development library

Depends on Javascript 1.6+ (ECMA-262 Edition 5) and the canvas-element
Tested on Chrome 6+, Firefox 3.6.x/4.x, Safari 5+. FF 4.0 with openGL accelerated canvas is recommended.

== Highlights
  * Animation(), Sprite(), SpriteSheet() and other useful constructors
  * Easy and robust game states to switch between menus, play, high score lists and settings
  * Documented code and explained examples

Jaws also...
  * Does <canvas> for all gfx, it's the HW-accelerated future
  * Does Not depend on any other javascript library
  * Doesn't try to force a certain "JS class pattern" on you, just pure javascript as mother nature intended it
  * Tries to make asset-handling in webgames as easy as possible
  * Often does object literals as arguments for readabillity (ie. new Sprite({image: "player.png", x: 100, y: 100})
  * Builds on lessons learned from years of developing http://github.com/ippa/chingu (Ruby game lib)

== Learn more
* {http://jawsjs.com/}[http://jawsjs.com/]              - Official Jaws homepage. Jaws docs and design choices.
* {http://jawsjs.com/source/test/}[http://jawsjs.com/source/test/]    - Jaws QUnit testsuite

== Simple examples demonstrating certain features
Check out the sourcecode for comments and explanations:

* http://jawsjs.com/source/examples/example1.html  - focus: manual setup of canvas. later examples shows better ways.
* http://jawsjs.com/source/examples/example2.html  - focus: jaws game states
* http://jawsjs.com/source/examples/example3.html  - focus: jaws.Animation()
* http://jawsjs.com/source/examples/example4.html  - focus: jaws.Rect based collision detection
* http://jawsjs.com/source/examples/example5.html  - focus: the jaws.Sprite({anchor: "..."}) parameter
* http://jawsjs.com/source/examples/example6.html  - focus: jaws.Parallax
* http://jawsjs.com/source/examples/example7.html  - focus: DOM-based sprites

== Games using Jaws
* {http://ippa.se/webgames/unwaivering/}[http://ippa.se/webgames/unwaivering/]  - A Jaws-game for http://www.ludumdare.com/compo/2011/01/25/minild-24/

.. missing your game here? Msg me on github!

== Code demo
  //
  // Jaws will provide powerful functions like jaws.start() to quickly get a robust gameloop running.
  // It's also possible to do it more manually, fetch your own canvas context and sent it to new Sprite() for example.
  // Nothing stops you from using jaws.assets or other jaws.helpers with your own game loop either.
  //
  // Below code shows the preferred way, letting jaws worry about most of the boring setup stuff
  // so we can get straight to get game logic.
  //
  <html>
  <script src="jaws.js"></script>
  <body>

  <canvas width=500 height=300></canvas> <!-- don't set width/height of canvas with CSS -->

  <script>
    // Jaws encourages the use of game states to separate various parts of your game.
    // We send MyGameState to jaws.start() to start with.
    // You can later switch to another game state with jaws.switchGameState(OtherGameState)
    function MyGameState() {
      var player;
      var robot;
    
      // Put your one-time initializing here. Will get called once each time this game state is activated.
      this.setup = function() {
        // Make a sprite, place it at position 10/200
        // The string "player.png" will resolve to a previously fetched resource
        // We let jaws worry about what canvas to paint to here.
        // If we want we could simple pass {context: my_canvas_context} to Sprite constructor
        player = new jaws.Sprite({image: "player.png", x: 10, y: 200});
    
        // Let's create an animated robot sprite
        robot = new jaws.Sprite({x: 200, y: 200});

        robot.animation = new jaws.Animation({sprite_sheet: "images/droid_11x15.png", frame_size: [11,15], frame_duration: 120});
      }
    
      // update() is called each gametick with given FPS. Put your game logic here.
      this.update = function() {
        if(jaws.pressed("left")) { player.x--; }
        if(jaws.pressed("right")) { player.x++; }
        robot.image = robot.animation.next();
      }
    
      // draw() is called each gametick just after update() is done. Put your drawing/canvas stuff here.
      this.draw = function() {
        player.draw();
        robot.draw();
      }
    }
    
    //
    // Add to jaws internal list of assets.
    // You can then either:
    // - have jaws.start() load them automatically for you
    // - or load them manually with jaws.assets.loadAll({loaded: myAssetsAreReadyCall})
    //
    jaws.assets.add("images/droid_11x15.png");
    jaws.assets.add("images/player.png");
    
    //
    // jaws.start() is the easiest way to get something up and running. It will:
    //
    // 1) Call jaws.init() that will detect <canvas> (or create one for you) and set up the 2D context
    // - then available in jaws.canvas and jaws.context
    //
    // 2) Pre-load all assets
    // - player.png image is then available with jaws.assets.get("player.png")
    //
    // 3) When all assets are loaded, call setup()
    // 4) Then call update() / draw() with given FPS (default 60) until game ends or another game state is activated
    //
    jaws.start(MyGameState);
  </script>
  </body>
  </html>

